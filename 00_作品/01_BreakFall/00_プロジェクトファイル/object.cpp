//========================================================================================================
//
//オブジェクト処理[object.cpp]
// Author Murata Shinnosuke
//
//========================================================================================================
#include "object.h"
#include "component.h"

//静的メンバ変数を初期化する
std::vector<Object*> Object::m_vObject;

//========================================================================================================
//初期化処理
//========================================================================================================
void Object::Init()
{
	//コンポーネントの数分繰り返す
	for (unsigned int i = 0; i < this->m_vComponent.size(); i++)
	{
		//コンポーネントを初期する
		this->m_vComponent[i]->Init();
	}
}

//========================================================================================================
//終了処理
//========================================================================================================
void Object::Uninit()
{
	//コンポーネントの数分繰り返す
	for (unsigned int i = 0; i < this->m_vComponent.size(); i++)
	{
		//コンポーネントを終了する
		this->m_vComponent[i]->Uninit();
		delete this->m_vComponent[i];
	}

	//コンポーネントをクリアする
	this->m_vComponent.clear();
}

//========================================================================================================
//更新処理
//========================================================================================================
void Object::Update()
{
	//コンポーネントの数分繰り返す
	for (unsigned int i = 0; i < this->m_vComponent.size(); i++)
	{
		//コンポーネントを更新する
  		this->m_vComponent[i]->Update();
	}
}

//========================================================================================================
//描画処理
//========================================================================================================
void Object::Draw()
{
	//コンポーネントの数分繰り返す
	for (unsigned int i = 0; i < this->m_vComponent.size(); i++)
	{
		//コンポーネントを描画する
		this->m_vComponent[i]->Draw();
	}
}

//========================================================================================================
//一括更新
//========================================================================================================
void Object::UpdateAll()
{
	//オブジェクトの数分繰り返す
	for (unsigned int i = 0; i < Object::m_vObject.size(); i++)
	{
		//アクティブフラグを確認する
		if (!Object::m_vObject[i]->m_isActive)
		{//アクティブじゃない場合
			//次のループに移行する
			continue;
		}

		//更新処理を行う
 		Object::m_vObject[i]->Update();
	}

	//オブジェクト破棄用コンテナが空になるまで繰り返す
	std::vector<Object*> vObjectDestroy = Object::m_vObject;
	while (!vObjectDestroy.empty())
	{
		//コンテナから最初のオブジェクトを取り出す
		Object* pObject = vObjectDestroy.front();
		vObjectDestroy.erase(vObjectDestroy.begin());

		//オブジェクトの死亡フラグを確認する
		if (!pObject->m_isDeath)
		{//死亡フラグが立っていない場合
			//次のループに移行する
			continue;
		}

		//オブジェクトを破棄する
		pObject->Uninit();   //終了
		delete pObject;
	}
}

//========================================================================================================
//一括描画
//========================================================================================================
void Object::DrawAll()
{
	//優先度の分繰り返す
	for (int i = 0; i < Object::PRIORITY; i++)
	{
		//オブジェクトの数分繰り返す
		for (unsigned int j = 0; j < Object::m_vObject.size(); j++)
		{
			//優先度を確認する
			if (Object::m_vObject[j]->GetPriority() != i)
			{//現在の周回と一致しない場合
				//次のループに移行する
				continue;
			}

			//アクティブフラグを確認する
			if (!Object::m_vObject[j]->m_isActive)
			{//アクティブじゃない場合
				//次のループに移行する
				continue;
			}

			//描画処理を行う
			Object::m_vObject[j]->Draw();
		}
	}
}

//========================================================================================================
//一括破棄
//========================================================================================================
void Object::DestroyAll()
{
	//オブジェクトのコンテナが空になるまで繰り返す
	while (!Object::m_vObject.empty())
	{
		//終了処理を行う
		Object::m_vObject.front()->Uninit();
		delete Object::m_vObject.front();
	}
}

//========================================================================================================
//検索
//========================================================================================================
Object* Object::Find(std::string sName)
{
	//オブジェクトの数分繰り返す
	for (unsigned int i = 0; i < Object::m_vObject.size(); i++)
	{
		//名前を確認する
		if (Object::m_vObject[i]->m_sName != sName)
		{//名前が違う場合
			//次のループに移行する
			continue;
		}

		//オブジェクトを返す
		return Object::m_vObject[i];
	}

	//nullを返す
	return nullptr;
}