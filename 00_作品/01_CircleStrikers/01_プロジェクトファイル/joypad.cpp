//========================================================================================================
//
//ジョイパッド入力処理[input_joypad.cpp]
// Author Murata Shinnosuke
//
//========================================================================================================
#include "joypad.h"

//静的メンバ変数を初期化する
const int Joypad::MAX_NUM;   //最大数

//========================================================================================================
//コンストラクタ
//========================================================================================================
Joypad::Joypad()
{
	for (int i = 0; i < MAX_NUM; i++)
	{
		m_aState[i] = {};   //状態
		m_aStateTrigger[i] = {};   //トリガー状態
		m_isButtonPressed[i] = {};   //ボタンが押されたかどうが
	}
}

//========================================================================================================
//デストラクタ
//========================================================================================================
Joypad::~Joypad()
{
}

//========================================================================================================
// ジョイパッドの初期化処理
//========================================================================================================
HRESULT Joypad::Init(HINSTANCE hInstance, HWND hWnd)
{
	for (int i = 0; i < MAX_NUM; i++)
	{
		//ボタンは押されていない！
		m_isButtonPressed[i] = false;

		//メモリをクリアする
		memset(&m_aState[i], 0, sizeof(XINPUT_STATE));
	}

	//XInputのステートを有効にする
	XInputEnable(true);

	return S_OK;
}

//========================================================================================================
// ジョイパッドの終了処理
//========================================================================================================
void Joypad::Uninit(void)
{
	//XInputのステートを無効にする
	XInputEnable(false);
}

//========================================================================================================
// ジョイパッドの更新処理
//========================================================================================================
void Joypad::Update(void)
{
	XINPUT_STATE joykeyState;	//ジョイパッドの入力情報

	//ジョイパッドの情報を取得
	for (int i = 0; i < MAX_NUM; i++)
	{
		if (XInputGetState(i, &joykeyState) == ERROR_SUCCESS)
		{
			if (m_aStateTrigger[i].Gamepad.wButtons != joykeyState.Gamepad.wButtons)
			{
				//トリガー情報を取得する
				m_aStateTrigger[i] = joykeyState;
				m_isButtonPressed[i] = false;
			}
			else
			{
				m_isButtonPressed[i] = true;
			}

			//プレス情報を取得する
			m_aState[i] = joykeyState;
		}
	}

}

//========================================================================================================
// ジョイパッドのプレス情報を取得
//========================================================================================================
bool Joypad::GetPress(JOYKEY key, int nId)
{
	return (m_aState[nId].Gamepad.wButtons & key) ? true : false;
}


//========================================================================================================
// ジョイパッドのトリガー情報を取得
//========================================================================================================
bool Joypad::GetTrigger(JOYKEY key, int nId)
{
	// ボタンの状態を取得
	bool button_state = (m_aStateTrigger[nId].Gamepad.wButtons & key) ? true : false;

	// ボタンが押された瞬間かどうか
	bool button_just_pressed = button_state && !m_isButtonPressed[nId];

	// ボタンが押された瞬間ならtrueを返す
	return button_just_pressed;
}

//========================================================================================================
// ジョイパッドの状態を取得
//========================================================================================================
XINPUT_STATE* Joypad::GetState(int nId)
{
	return &m_aState[nId];
}