//========================================================================================================
//
//Xファイル処理[Xfile.cpp]
// Author Murata Shinnosuke
//
//========================================================================================================
#include "Xfile.h"
#include "manager.h"
#include "renderer.h"

//========================================================================================================
//コンストラクタ
//========================================================================================================
XFile::XFile()
{
	//メンバ変数を初期化する
	this->m_vList.clear();
}

//========================================================================================================
//デストラクタ
//========================================================================================================
XFile::~XFile()
{
}

//========================================================================================================
//初期化処理
//========================================================================================================
void XFile::Init()
{
}

//========================================================================================================
//終了処理
//========================================================================================================
void XFile::Uninit()
{
	//リストの数分繰り返す
	for (unsigned int i = 0; i < this->m_vList.size(); i++)
	{
		//メッシュを破棄する
		if (m_vList[i].mesh.pMesh != nullptr)
		{
			m_vList[i].mesh.pMesh->Release();
			m_vList[i].mesh.pMesh = nullptr;
		}

		//マテリアルを破棄する
		if (m_vList[i].mesh.pBuffMat != nullptr)
		{
			m_vList[i].mesh.pBuffMat->Release();
			m_vList[i].mesh.pBuffMat = nullptr;
		}
	}

	//リストを削除する
	this->m_vList.clear();
}

//========================================================================================================
//取得処理
//========================================================================================================
XFile::Mesh XFile::Get(std::string sFileName)
{
	//パスにファイル名を足す
	std::string sPass = "data\\MODEL\\";
	sPass += sFileName;

	//リストの数分繰り返す
	for (unsigned int i = 0; i < this->m_vList.size(); i++)
	{
		//指定のパスが既に読み込まれているか？
		if (m_vList[i].sPass == sPass)
		{//読み込まれている場合
			//テクスチャを返す
			return m_vList[i].mesh;
		}
	}

	//デバイスを取得する
	LPDIRECT3DDEVICE9 pDevice = Manager::Get()->GetRenderer()->GetDevice();

	//Xファイルを読み込む
	XFile::List list;
	D3DXLoadMeshFromX
	(
		sPass.c_str(),
		D3DXMESH_SYSTEMMEM,
		pDevice,
		nullptr,
		&list.mesh.pBuffMat,
		nullptr,
		&list.mesh.dwMat,
		&list.mesh.pMesh);

	//パスを保存する
	list.sPass = sPass;

	//リストに保存する
	this->m_vList.push_back(list);

	//メッシュを返す
	return list.mesh;
}