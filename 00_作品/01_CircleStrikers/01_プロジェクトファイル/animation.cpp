//========================================================================================================
//
//アニメーションの処理[animation.cpp]
// Author MurataShinnosuke
//
//========================================================================================================
#include "animation.h"

//静的メンバ変数を初期化する
const int Animation::MAX_NUM;   //最大数
Animation* Animation::m_apAnimation[Animation::MAX_NUM];   //アニメーション情報

//========================================================================================================
//コンストラクタ
//========================================================================================================
Animation::Animation()
{
	//メンバ変数を初期化する
	this->m_nId = -1;   //番号
	this->m_nFrame = 0;
	this->m_nPattern = 0;   //パターン
	this->m_nTime = 0;
	this->m_nCnt = 0;
	this->m_pTexture = nullptr;

	//アニメーション情報を保存する
	for (int i = 0; i < Animation::MAX_NUM; i++)
	{
		//情報があるか確認する
		if (Animation::m_apAnimation[i] != nullptr)
		{//情報がある場合
			//次のループに移行する
			continue;
		}

		//情報を保存する
		this->m_nId = i;   //番号
		Animation::m_apAnimation[i] = this;

		//ループを抜け出す
		break;
	}
}

//========================================================================================================
//デストラクタ
//========================================================================================================
Animation::~Animation()
{
}

//========================================================================================================
//初期化処理
//========================================================================================================
void Animation::Init()
{
}

//========================================================================================================
//終了処理
//========================================================================================================
void Animation::Uninit()
{
	//自身を解放する
	int nId = this->m_nId;
	delete Animation::m_apAnimation[nId];
	Animation::m_apAnimation[nId] = nullptr;
}

//========================================================================================================
//更新処理
//========================================================================================================
void Animation::Update()
{
	//カウンターを進める
	this->m_nCnt++;
	if (this->m_nCnt >= this->m_nTime)
	{//カウンターが一定時間経過した場合
		//フレームを進める
		this->m_nFrame++;
		if (this->m_nFrame >= this->m_nPattern)
		{//フレームがパターン数を超えた場合
			//フレームを最初に戻す
			this->m_nFrame = 0;
		}

		//カウンターをリセットする
		this->m_nCnt = 0;
	}
}

//========================================================================================================
//リセット処理
//========================================================================================================
void Animation::Reset()
{
	//再生に必要な情報をリセットする
	this->m_nFrame = 0;   //フレーム
	this->m_nCnt = 0;   //カウンター
}

//========================================================================================================
//生成処理
//========================================================================================================
Animation* Animation::Create(int nPattern, int nTime, LPDIRECT3DTEXTURE9 pTexture)
{
	//アニメーションを生成する
	Animation* pAnimation = new Animation;

	//情報を設定する
	pAnimation->m_nPattern = nPattern;   //パターン
	pAnimation->m_nTime = nTime;   //時間
	pAnimation->m_pTexture = pTexture;   //テクスチャ

	//アニメーションを返す
	return pAnimation;
}

//========================================================================================================
//全更新処理
//========================================================================================================
void Animation::UpdateAll()
{
	for (int i = 0; i < Animation::MAX_NUM; i++)
	{
		//アニメーション情報を確認する
		if (Animation::m_apAnimation[i] == nullptr)
		{//情報がない場合
			//次のループに移行する
			continue;
		}

		//更新処理を行う
		Animation::m_apAnimation[i]->Update();
	}
}