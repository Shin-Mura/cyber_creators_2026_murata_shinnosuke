//========================================================================================================
//
//モーションの処理[motion.cpp]
// Author MurataShinnosuke
//
//========================================================================================================
#include "motion.h"

//========================================================================================================
//コンストラクタ
//========================================================================================================
Motion::Motion()
{
	//メンバ変数を初期化する
	this->m_isLoop = false;   //ループフラグ
	this->m_nFrame = 0;   //現在フレーム
	this->m_nFrameBlend = 0;
	this->m_nKey = 0;   //現在キー
	this->m_nNumKey = 0;   //キーの数

	for (int i = 0; i < Motion::MAX_KEY; i++)
	{
		//キーを初期化する
		this->m_key[i].nFrame = 0;

		for (int j = 0; j < 32; j++)
		{
			//位置と向きを初期化する
			this->m_key[i].pos[j] = { 0.0f, 0.0f, 0.0f };   //位置
			this->m_key[i].rot[j] = { 0.0f, 0.0f, 0.0f };   //向き
		}
	}
}

//========================================================================================================
//デストラクタ
//========================================================================================================
Motion::~Motion()
{
}

//========================================================================================================
//初期化処理
//========================================================================================================
void Motion::Init()
{
}

//========================================================================================================
//終了処理
//========================================================================================================
void Motion::Uninit()
{
}

//========================================================================================================
//更新処理
//========================================================================================================
void Motion::Update()
{
	int nKey = this->m_nKey;   //現在キー

	//現在キーを確認する
	if (nKey < this->m_nNumKey)
	{//現在キーがキーの数を超えていない場合
		//現在フレームを進める
		this->m_nFrame++;

		for (int i = 0; i < 32; i++)
		{
			//次のキー
			int nKeyNext = nKey + 1;
			if (nKeyNext >= this->m_nNumKey)
			{//現在キーがキーの数を超えた場合
				//次のキーを1番最初にする
				nKeyNext = 0;
			}

			//次の向きとの差分を取る
			D3DXVECTOR3 rotDiff = m_key[nKeyNext].rot[i] - this->m_key[nKey].rot[i];

			//向きを反映させる
			this->m_rot[i] =
			{
				this->m_key[nKey].rot[i].x + ((rotDiff.x / this->m_key[nKey].nFrame) * this->m_nFrame),
				this->m_key[nKey].rot[i].y + ((rotDiff.y / this->m_key[nKey].nFrame) * this->m_nFrame),
				this->m_key[nKey].rot[i].z + ((rotDiff.z / this->m_key[nKey].nFrame) * this->m_nFrame),
			};
		}

		if (this->m_nFrame >= this->m_key[nKey].nFrame)
		{//現在フレームが現在キーのフレームを超えた場合
			//現在フレームをリセットする
			this->m_nFrame = 0;

			//次のキーに移行する
			this->m_nKey++;
			if (this->m_nKey >= this->m_nNumKey)
			{//現在キーがキーの数を超えた場合
				//ループフラグを確認する
				if (this->m_isLoop == true)
				{//ループフラグが立っている場合
					//現在キーをリセットする
					this->m_nKey = 0;
				}
			}
		}
	}
}

//========================================================================================================
//キーの設定処理
//========================================================================================================
void Motion::Reset()
{
	//再生に必要な情報をリセットする
	this->m_nFrame = 0;
	this->m_nKey = 0;
}

//========================================================================================================
//キーの設定処理
//========================================================================================================
void Motion::SetKey(Motion::Key key)
{
	//今のキーの数を保存する
	int nNumKey = this->m_nNumKey;

	//キーを設定する
	this->m_key[nNumKey] = key;
	this->m_nNumKey++;   //キーをカウントする
}