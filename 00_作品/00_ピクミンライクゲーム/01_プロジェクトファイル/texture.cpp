//========================================================================================================
//
//テクスチャ処理[texture.cpp]
// Author Murata Shinnosuke
//
//========================================================================================================
#include "texture.h"
#include "manager.h"
#include "renderer.h"

//========================================================================================================
//コンストラクタ
//========================================================================================================
Texture::Texture()
{
	//メンバ変数を初期化する
	this->m_vList.clear();
}

//========================================================================================================
//デストラクタ
//========================================================================================================
Texture::~Texture()
{
}

//========================================================================================================
//初期化処理
//========================================================================================================
void Texture::Init()
{
}

//========================================================================================================
//終了処理
//========================================================================================================
void Texture::Uninit()
{
	//リストの数分繰り返す
	for (unsigned int i = 0; i < this->m_vList.size(); i++)
	{
		//テクスチャを破棄する
		this->m_vList[i].pTexture->Release();
	}

	//リストを削除する
	this->m_vList.clear();
}

//========================================================================================================
//取得処理
//========================================================================================================
LPDIRECT3DTEXTURE9 Texture::Get(std::string sFileName)
{
	//パスにファイル名を足す
	std::string sPass = "data\\TEXTURE\\";
	sPass += sFileName;

	//リストの数分繰り返す
	for (unsigned int i = 0; i < this->m_vList.size(); i++)
	{
		//指定のパスが既に読み込まれているか？
		if (this->m_vList[i].sPass == sPass)
		{//読み込まれている場合
			//テクスチャを返す
			return m_vList[i].pTexture;
		}
	}

	//デバイスを取得する
	LPDIRECT3DDEVICE9 pDevice = Manager::Get()->GetRenderer()->GetDevice();

	//テクスチャを読み込む
	Texture::List list;
	D3DXCreateTextureFromFile(pDevice, sPass.c_str(), &list.pTexture);
	list.sPass = sPass;

	//リストに保存する
	this->m_vList.push_back(list);

	//NULLを返す
	return list.pTexture;
}