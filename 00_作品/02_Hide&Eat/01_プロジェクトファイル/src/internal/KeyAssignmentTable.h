//=============================================================
//
// キー割り当て表 [KeyAssignmentTable.h]
// Author: Ito Kotaro
//
//=============================================================
#ifndef _KEY_ASSIGNMENT_TABLE_H_
#define _KEY_ASSIGNMENT_TABLE_H_

// キーボード
struct KeyboardTable
{
	std::string key;
	BYTE code;
};
const KeyboardTable keyboardTable[]=
{
	{"escape", DIK_ESCAPE},
	{"esc", DIK_ESCAPE},
	{"1", DIK_1},
	{"2", DIK_2},
	{"3", DIK_3},
	{"4", DIK_4},
	{"5", DIK_5},
	{"6", DIK_6},
	{"7", DIK_7},
	{"8", DIK_8},
	{"9", DIK_9},
	{"0", DIK_0},
	{"-", DIK_MINUS},
	{"minus", DIK_MINUS},
	{"=", DIK_EQUALS},
	{"equals", DIK_EQUALS},
	{"back", DIK_BACK},
	{"tab", DIK_TAB},
	{"q", DIK_Q},
	{"w", DIK_W},
	{"e", DIK_E},
	{"r", DIK_R},
	{"t", DIK_T},
	{"y", DIK_Y},
	{"u", DIK_U},
	{"i", DIK_I},
	{"o", DIK_O},
	{"p", DIK_P},
	{"[", DIK_LBRACKET},
	{"lbracket", DIK_LBRACKET},
	{"]", DIK_RBRACKET},
	{"rbracket", DIK_RBRACKET},
	{"enter", DIK_RETURN},
	{"return", DIK_RETURN},
	{"lctrl", DIK_LCONTROL},
	{"lcontrol", DIK_LCONTROL},
	{"a", DIK_A},
	{"s", DIK_S},
	{"d", DIK_D},
	{"f", DIK_F},
	{"g", DIK_G},
	{"h", DIK_H},
	{"j", DIK_J},
	{"k", DIK_K},
	{"l", DIK_L},
	{";", DIK_SEMICOLON},
	{"semicolon", DIK_SEMICOLON},
	{"'", DIK_APOSTROPHE},
	{"apostrophe", DIK_APOSTROPHE},
	{"`", DIK_GRAVE},
	{"grave", DIK_GRAVE},
	{"lshift", DIK_LSHIFT},
	{"\\", DIK_BACKSLASH},
	{"backslash", DIK_BACKSLASH},
	{"z", DIK_Z},
	{"x", DIK_X},
	{"c", DIK_C},
	{"v", DIK_V},
	{"b", DIK_B},
	{"n", DIK_N},
	{"m", DIK_M},
	{",", DIK_COMMA},
	{"comma", DIK_COMMA},
	{".", DIK_PERIOD},
	{"period", DIK_PERIOD},
	{"/", DIK_SLASH},
	{"slash", DIK_SLASH},
	{"rshift", DIK_RSHIFT},
	{"*", DIK_MULTIPLY},
	{"multiply", DIK_MULTIPLY},
	{"lalt", DIK_LMENU},
	{"lmenu", DIK_LMENU},
	{"space", DIK_SPACE},
	{"capslock", DIK_CAPITAL},
	{"capital", DIK_CAPITAL},
	{"f1", DIK_F1},
	{"f2", DIK_F2},
	{"f3", DIK_F3},
	{"f4", DIK_F4},
	{"f5", DIK_F5},
	{"f6", DIK_F6},
	{"f7", DIK_F7},
	{"f8", DIK_F8},
	{"f9", DIK_F9},
	{"f10", DIK_F10},
	{"numlock", DIK_NUMLOCK},
	{"scrolllock", DIK_SCROLL},
	{"scroll", DIK_SCROLL},
	{"numpad7", DIK_NUMPAD7},
	{"n7", DIK_NUMPAD7},
	{"numpad8", DIK_NUMPAD8},
	{"n8", DIK_NUMPAD8},
	{"numpad9", DIK_NUMPAD9},
	{"n9", DIK_NUMPAD9},
	{"subtract", DIK_SUBTRACT},
	{"n-", DIK_SUBTRACT},
	{"numpad4", DIK_NUMPAD4},
	{"n4", DIK_NUMPAD4},
	{"numpad5", DIK_NUMPAD5},
	{"n5", DIK_NUMPAD5},
	{"numpad6", DIK_NUMPAD6},
	{"n6", DIK_NUMPAD6},
	{"add", DIK_ADD},
	{"n+", DIK_ADD},
	{"numpad1", DIK_NUMPAD1},
	{"n1", DIK_NUMPAD1},
	{"numpad2", DIK_NUMPAD2},
	{"n2", DIK_NUMPAD2},
	{"numpad3", DIK_NUMPAD3},
	{"n3", DIK_NUMPAD3},
	{"numpad0", DIK_NUMPAD0},
	{"n0", DIK_NUMPAD0},
	{"n.", DIK_DECIMAL},
	{"decimal", DIK_DECIMAL},
	{"f11", DIK_F11},
	{"f12", DIK_F12},
	{"f13", DIK_F13},
	{"f14", DIK_F14},
	{"f15", DIK_F15},
	{"kana", DIK_KANA},
	{"convert", DIK_CONVERT},
	{"noconvert", DIK_NOCONVERT},
	{"yen", DIK_YEN},
	{"numpadequals", DIK_NUMPADEQUALS},
	{"n=", DIK_NUMPADEQUALS},
	{"^", DIK_CIRCUMFLEX},
	{"circumflex", DIK_CIRCUMFLEX},
	{"@", DIK_AT},
	{"at", DIK_AT},
	{":", DIK_COLON},
	{"colon", DIK_COLON},
	{"_", DIK_UNDERLINE},
	{"underline", DIK_UNDERLINE},
	{"kanji", DIK_KANJI },
	{"stop", DIK_STOP },
	{"ax", DIK_AX },
	{"unlabeled", DIK_UNLABELED },
	{"nenter", DIK_NUMPADENTER },
	{"numpadenter", DIK_NUMPADENTER },
	{"rctrl", DIK_RCONTROL },
	{"econtrol", DIK_RCONTROL },
	{ "n,", DIK_NUMPADCOMMA },
	{ "numpadcomma", DIK_NUMPADCOMMA },
	{ "n/", DIK_DIVIDE },
	{ "divide", DIK_DIVIDE },
	{ "sysrq", DIK_SYSRQ },
	{ "ralt", DIK_RMENU },
	{ "rmenu", DIK_RMENU },
	{ "pause", DIK_PAUSE },
	{ "home", DIK_HOME },
	{ "up", DIK_UP },
	{ "pageup", DIK_PRIOR },
	{ "prior", DIK_PRIOR },
	{ "left", DIK_LEFT },
	{ "right", DIK_RIGHT },
	{ "end", DIK_END },
	{ "down", DIK_DOWN },
	{ "pagedown", DIK_NEXT },
	{ "next", DIK_NEXT },
	{ "insert", DIK_INSERT },
	{ "delete", DIK_DELETE },
	{ "lwindows", DIK_LWIN },
	{ "lwin", DIK_LWIN },
	{ "rwindows", DIK_RWIN },
	{ "rwin", DIK_RWIN },
	{ "menu", DIK_APPS },
	{ "apps", DIK_APPS },
	{ "power", DIK_POWER },
	{ "windows", DIK_SLEEP },
	{ "sleep", DIK_SLEEP }
};


// ゲームパッド
struct GamepadTable
{
	std::string key;
	WORD code;
};
const GamepadTable gamepadTable[] =
{
	{"p:up", XINPUT_GAMEPAD_DPAD_UP},
	{"p:down", XINPUT_GAMEPAD_DPAD_DOWN},
	{"p:left", XINPUT_GAMEPAD_DPAD_LEFT},
	{"p:right", XINPUT_GAMEPAD_DPAD_RIGHT},
	{"p:start", XINPUT_GAMEPAD_START},
	{"p:back", XINPUT_GAMEPAD_BACK},
	{"p:leftthumb", XINPUT_GAMEPAD_LEFT_THUMB},
	{"p:left_thumb", XINPUT_GAMEPAD_LEFT_THUMB},
	{"p:lt", XINPUT_GAMEPAD_LEFT_THUMB},
	{"p:rightthumb", XINPUT_GAMEPAD_RIGHT_THUMB},
	{"p:right_thumb", XINPUT_GAMEPAD_RIGHT_THUMB},
	{"p:rt", XINPUT_GAMEPAD_RIGHT_THUMB},
	{"p:leftshoulder", XINPUT_GAMEPAD_LEFT_SHOULDER},
	{"p:left_shoulder", XINPUT_GAMEPAD_LEFT_SHOULDER},
	{"p:ls", XINPUT_GAMEPAD_LEFT_SHOULDER},
	{"p:rightshoulder", XINPUT_GAMEPAD_RIGHT_SHOULDER},
	{"p:right_shoulder", XINPUT_GAMEPAD_RIGHT_SHOULDER},
	{"p:rs", XINPUT_GAMEPAD_RIGHT_SHOULDER},
	{"p:a", XINPUT_GAMEPAD_A},
	{"p:b", XINPUT_GAMEPAD_B},
	{"p:x", XINPUT_GAMEPAD_X},
	{"p:y", XINPUT_GAMEPAD_Y},
};


// ゲームパッド
struct MouseTable
{
	std::string key;
	int code;
};
const MouseTable mouseTable[] =
{
	{"leftclick", 0},
	{"left_click", 0},
	{"lclick", 0},
	{"l_click", 0},
	{"m:l", 0},
	{"m:left", 0},

	{"rightclick", 1},
	{"right_click", 1},
	{"rclick", 1},
	{"r_click", 1},
	{"m:r", 1},
	{"m:right", 1},

	{"middleclick", 2},
	{"middle_click", 2},
	{"mclick", 2},
	{"m_click", 2},
	{"m:m", 2},
	{"m:middle", 2}
};


#endif // !_KEY_ASSIGNMENT_TABLE_H_
