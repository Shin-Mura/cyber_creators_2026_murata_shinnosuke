//========================================================================================================
//
//キーボード入力処理[input_keyboard.cpp]
// Author Murata Shinnosuke
//
//========================================================================================================
#include "keyboard.h"

//静的メンバ変数を初期化する
const int Keyboard::MAX;   //最大数

//========================================================================================================
//コンストラクタ
//========================================================================================================
Keyboard::Keyboard()
{
	for (int i = 0; i < MAX; i++)
	{
		m_aState[i] = {};   //状態
		m_aStateTrigger[i] = {};   //状態
	}
}

//========================================================================================================
//デストラクタ
//========================================================================================================
Keyboard::~Keyboard()
{
}

//========================================================================================================
//初期化処理
//========================================================================================================
HRESULT Keyboard::Init(HINSTANCE hInstance, HWND hWnd)
{
	if (FAILED(Input::Init(hInstance, hWnd)))
	{
		return E_FAIL;
	}

	//キーボードの生成
	if (FAILED(m_pInput->CreateDevice(GUID_SysKeyboard, &m_pDevice, NULL)))
	{
		return E_FAIL;
	}

	//データフォーマットを設定
	if (FAILED(m_pDevice->SetDataFormat(&c_dfDIKeyboard)))
	{
		return E_FAIL;
	}

	//協調モードを設定
	if (FAILED(m_pDevice->SetCooperativeLevel(hWnd, (DISCL_FOREGROUND | DISCL_NONEXCLUSIVE))))
	{
		return E_FAIL;
	}

	//キーボードへのアクセス権を獲得
	m_pDevice->Acquire();

	return S_OK;
}

//========================================================================================================
//終了処理
//========================================================================================================
void Keyboard::Uninit()
{
	//入力デバイスを破棄する
	Input::Uninit();
}

//========================================================================================================
//更新処理
//========================================================================================================
void Keyboard::Update()
{
	BYTE aKeyState[MAX];

	//入力デバイスからデータを取得
	if (SUCCEEDED(m_pDevice->GetDeviceState(sizeof(aKeyState), &aKeyState[0])))
	{
		for (int i = 0; i < MAX; i++)
		{
			m_aStateTrigger[i] = (m_aState[i] ^ aKeyState[i]) & aKeyState[i];
			m_aState[i] = aKeyState[i];   //キーボードのプレス情報を保存
		}
	}
	else
	{
		m_pDevice->Acquire();
	}
}

//========================================================================================================
//プレス情報の取得処理
//========================================================================================================
bool Keyboard::GetPress(int nKey) { return(m_aState[nKey] & 0x80) != 0; }

//========================================================================================================
//トリガー情報の取得処理
//========================================================================================================
bool Keyboard::GetTrigger(int nKey) { return(m_aStateTrigger[nKey] & 0x80) != 0; }